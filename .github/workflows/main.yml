# This is a basic workflow to help you get started with Actions

name: SFDX Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job deploys and tests functionality to Salesforce
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    
    # Sets up Salesforce CLI for this action
    - name: Salesforce SFDX CLI Action
      uses: sfdx-actions/setup-sfdx@v1
      with:
        # Authorize a Salesforce org using an SFDX auth URL
        sfdx-auth-url: ${{ secrets.DEVHUB_URL }}
        
    #Sets the default devhub org for us to create scratch orgs and packages against
    - name: Set Default DevHub
      run: sfdx force:config:set defaultdevhubusername=anthony.wheeler@sfdx.course.com

    #Creates a scratch org to test our code
    - name: Create Scratch Org
      run: sfdx force:org:create -a actionsBuild -d 1 -f config/project-scratch-def.json -s

    #Pushes all configurations to scratch org
    - name: Pushing source
      run: sfdx force:source:push -f

    #Run all Apex tests in our scratch org
    - name: Running Apex Tests
      run: sfdx force:apex:test:run -l RunLocalTests -w 30

    #Delete scratch org after successful build
    - name: Deleting Scratch Org
      run: sfdx force:org:delete -p

  # This job releases a new package version and deploys it to a UAT environment
  release:
    needs: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Sets up Salesforce CLI for this action
      - name: Salesforce SFDX CLI Action
        uses: sfdx-actions/setup-sfdx@v1
        with:
          # Authorize a Salesforce org using an SFDX auth URL
          sfdx-auth-url: ${{ secrets.DEVHUB_URL }}

      # Creates a new package version for firstCoursePackage
      - name: Getting Last Release
        run: |
          PACKAGE_VERSION_JSON="$(eval sfdx force:package:version:list --concise --released --packages FirstCoursePackage --json | jq '.result? | sort_by(-.MajorVersion, -.MinorVersion, -.PatchVersion, -.BuildNumber) | .[0] // ""')"
          echo $PACKAGE_VERSION_JSON
          
      - name: Getting Is Released
        run: IS_RELEASED=$(jq -r '.IsReleased?' <<< $PACKAGE_VERSION_JSON)

      - name: Getting Major Version
        run: MAJOR_VERSION=$(jq -r '.MajorVersion?' <<< $PACKAGE_VERSION_JSON)

      - name: Getting Minor Version
        run:  MINOR_VERSION=$(jq -r '.MinorVersion?' <<< $PACKAGE_VERSION_JSON)

      - name: Getting Patch Version
        run:  PATCH_VERSION=$(jq -r '.PatchVersion?' <<< $PACKAGE_VERSION_JSON)
        
      - name: Getting Build Version
        run:  BUILD_VERSION="NEXT"

      - name: Getting Major Version 2
        run:  if [ -z $MAJOR_VERSION ]; then MAJOR_VERSION=1; fi;

      - name: Getting Minor Version 2
        run:  if [ -z $MINOR_VERSION ]; then MINOR_VERSION=0; fi;

      - name: Getting Patch Version 2
        run:  if [ -z $PATCH_VERSION ]; then PATCH_VERSION=0; fi;

      - name: Getting Is Released
        run:  if [ "$IS_RELEASED" == "true" ]; then MINOR_VERSION=$(($MINOR_VERSION+1)); fi;

      - name: Getting Version Number
        run:  |
          VERSION_NUMBER="$MAJOR_VERSION.$MINOR_VERSION.$PATCH_VERSION.$BUILD_VERSION"
          echo $VERSION_NUMBER

      - name: Creating Package Version
        run: export PACKAGE_VERSION_ID="$(eval sfdx force:package:version:create --package FirstCoursePackage --versionnumber $VERSION_NUMBER --installationkeybypass --wait 30 --json | jq -r '.result.SubscriberPackageVersionId')"
      
      # Create UAT environment to do end user testing in.
      - name: Creating UAT Environment
        run: sfdx force:org:create -a UAT -d 30 -s -f config/project-scratch-json.com

      - name: Install Package Version
        run: sfdx force:package:install --package $PACKAGE_VERSION_ID --wait 10 --publishwait 10 --noprompt

      - name: Generate User Password
        run: sfdx force:user:password:generate

      - name: Display User
        run: sfdx force:user:display
